const runSolver=async(difficulty,prefix)=>{const solver=new powSolver,nonce=await solver.solve(difficulty,prefix);return document.querySelector(".calculating td.blink").innerHTML="V",document.querySelector(".calculating td.blink").classList.remove("blink"),document.querySelector(".submitting").style.display="table-row",nonce},sendResult=async(nonce,redirect)=>{try{const response=await fetch("/pow",{method:"POST",body:JSON.stringify(nonce)});window.responseStatus=response.status,window.nonceSent=!0,200===response.status?(document.querySelector(".submitting td.blink").innerHTML="V",document.querySelector(".submitting td.blink").classList.remove("blink"),setInterval(()=>{document.querySelector(".success").style.display="table-row"},500),setInterval(()=>{window.location.href=redirect?`${redirect}`:"/"},3e3)):(document.querySelector(".submitting td.blink").innerHTML="X",document.querySelector(".submitting td.blink").classList.remove("blink"),setInterval(()=>{document.querySelector(".failed").style.display="table-row"},500),setInterval(()=>{window.location.reload()},3e3))}catch(err){console.log("Error")}};window.init=(difficulty,prefix,redirect)=>{setTimeout(async()=>{const nonce=await runSolver(difficulty,prefix);setTimeout(async()=>{await sendResult(nonce,redirect)},500)},1500)};